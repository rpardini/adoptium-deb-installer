#!/bin/bash

# rpardini: this script is a mess, it dates back to 2006.

set -e
#set -x

fp_exit_with_error() {
  echo "" 1>&2
	echo "{{fullHumanTitle}} is NOT installed: $@" 1>&2
	exit 1
}

FILENAME_TAR_GZ="{{{filename}}}"
DOWNLOAD_TAR_GZ_URL="{{{downloadUrl}}}"
SHA256SUM_TGZ="{{sha256sum}}"
# @TODO: maybe remove J_ID
J_ID={{destDir}}
INSTALLER_DIR=/var/cache/{{destDir}}-installer

PRIORITY=1081 # The priority for the alternatives.
JINFO_MANIFEST_FILE=/usr/lib/jvm/.{{destDir}}.jinfo
J_INSTALL_DIR=/usr/lib/jvm/{{destDir}}

########Create dirs
mkdir -p ${INSTALLER_DIR}
mkdir -p /usr/lib/jvm
#############


# Download and unpack, either from existing local file or download.
cd ${INSTALLER_DIR}

if [[ -f "${INSTALLER_DIR}/$FILENAME_TAR_GZ" ]]; then
  echo "Installing from local file ${INSTALLER_DIR}/$FILENAME_TAR_GZ"
else
  # no local file
  echo "No local file detected, will download."

  # use apt proxy if configured.
  APT_PROXIES=$(apt-config shell \
  http_proxy Acquire::http::Proxy \
  https_proxy Acquire::https::Proxy \
  ftp_proxy Acquire::ftp::Proxy \
  dl_direct Acquire::http::Proxy::github.com \
  dl_direct Acquire::http::Proxy::amazons3.com \
  )

  if [[ -n "$APT_PROXIES" ]]; then
    eval export $APT_PROXIES
  fi

  if [[ "$dl_direct" = "DIRECT" ]]; then
      unset http_proxy
      unset https_proxy
      unset ftp_proxy
  fi

  # if $INSTALLER_DIR/wgetrc exists, use it for downloading.
  # This allows for very specific edge cases to work.
  if [[ -f ${INSTALLER_DIR}/wgetrc ]]; then
    echo "Using wget settings from $INSTALLER_DIR/wgetrc"
  else
    echo "No $INSTALLER_DIR/wgetrc file found."
    echo "Creating $INSTALLER_DIR/wgetrc with default values."

    # setting wget options
    :> ${INSTALLER_DIR}/wgetrc
    echo "noclobber = off" >> ${INSTALLER_DIR}/wgetrc
    echo "dir_prefix = ." >> ${INSTALLER_DIR}/wgetrc
    echo "dirstruct = off" >> ${INSTALLER_DIR}/wgetrc
    echo "dot_style = giga" >> ${INSTALLER_DIR}/wgetrc
    echo "tries = 5" >> ${INSTALLER_DIR}/wgetrc
  fi

  # Now actually download the .tar.gz file.
  echo "Downloading {{fullHumanTitle}}..."
  wget --config=$INSTALLER_DIR/wgetrc --local-encoding=UTF-8 --continue -O ${FILENAME_TAR_GZ} ${DOWNLOAD_TAR_GZ_URL} || fp_exit_with_error "download failed"
  echo "Download done."
fi

# verify SHA256 checksum of (copied or downloaded) tarball
echo -n "Checking SHA256 checksum: "
echo "$SHA256SUM_TGZ  $FILENAME_TAR_GZ" | sha256sum -c > /dev/null 2>&1 || fp_exit_with_error "sha256sum mismatch $FILENAME_TAR_GZ"
echo "done, checksum $SHA256SUM_TGZ matched."

# unpack.
echo -n "Unpacking: "
tar xzf ${FILENAME_TAR_GZ} || fp_exit_with_error "cannot unpack"
echo "done."

J_DIR_INSIDE_TAR_GZ=$(find . -maxdepth 1 -type d | grep -v "^.$" | xargs)

echo -n "Putting '{{fullHumanTitle}}' in place, from dir '${J_DIR_INSIDE_TAR_GZ}': "
# make it owned by root, OpenJDK sends it with uid 500 or something.
chown -R root:root ${J_DIR_INSIDE_TAR_GZ}

# Copy JDK to the right dir
mv ${J_DIR_INSIDE_TAR_GZ} ${J_ID}
rm -rf ${J_INSTALL_DIR}
cp -rf ${J_ID} /usr/lib/jvm/

# Clean up
rm -rf ${J_ID}

echo "done."

echo "Cleaning outdated downloads..."
find ${INSTALLER_DIR} -maxdepth 1 -name '*.tar.gz' ! -name ${FILENAME_TAR_GZ} -type f -print
find ${INSTALLER_DIR} -maxdepth 1 -name '*.tar.gz' ! -name ${FILENAME_TAR_GZ} -type f -delete

# Gzips the man pages, if the directory exists.
if [[ -d ${J_INSTALL_DIR}/man/man1 ]]; then
  gzip -9 ${J_INSTALL_DIR}/man/man1/*.1 || { echo "Could not find man pages even though dir exists!" 1>&2 ; }
fi

# create .jinfo file header, for update-java-alternatives.
cat << EOD > ${JINFO_MANIFEST_FILE}
name=${J_ID}
alias=${J_ID}
priority=${PRIORITY}
section=java
EOD

HAS_JAVA_BIN=false
# Here we start from the binaries, and look for the man pages.
# create alternatives for the jre binaries.
# also add them to the .jinfo manifest for easy switching.
if [ -d ${J_INSTALL_DIR}/jre/bin ]; then # only jdk8 has this, so skip if not
  for f in ${J_INSTALL_DIR}/jre/bin/*; do
    name=`basename ${f}`;
    if [[ -f "$J_INSTALL_DIR/man/man1/$name.1.gz" ]]; then
      # man page available, install as a slave of the tool
      update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/jre/bin/${name} ${PRIORITY} --slave /usr/share/man/man1/${name}.1.gz ${name}.1.gz ${J_INSTALL_DIR}/man/man1/${name}.1.gz
    else
      # no man page available for this specific tool
      update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/jre/bin/${name} ${PRIORITY}
    fi
    echo "jre $name $J_INSTALL_DIR/jre/bin/$name" >> ${JINFO_MANIFEST_FILE}
    [[ "a$name" == "ajava" ]] && HAS_JAVA_BIN=true
  done
fi

if [ -d ${J_INSTALL_DIR}/bin ]; then # only jdk8 has this, so skip if not
  for f in ${J_INSTALL_DIR}/bin/*; do
    name=`basename ${f}`;
    if [[ -f "$J_INSTALL_DIR/man/man1/$name.1.gz" ]]; then
      # man page available, install as a slave of the tool
      update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/bin/${name} ${PRIORITY} --slave /usr/share/man/man1/${name}.1.gz ${name}.1.gz ${J_INSTALL_DIR}/man/man1/${name}.1.gz
    else
      # no man page available for this specific tool
      update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/bin/${name} ${PRIORITY}
    fi
    echo "jre $name $J_INSTALL_DIR/bin/$name" >> ${JINFO_MANIFEST_FILE}
    [[ "a$name" == "ajava" ]] && HAS_JAVA_BIN=true
  done
fi


# For the non-JRE tools, we actually start from the man pages.
if [[ -d ${J_INSTALL_DIR}/man/man1 ]]; then
  for f in ${J_INSTALL_DIR}/man/man1/*; do
    name=`basename ${f} .1.gz`;
    #don't link already linked JRE files
    if [[ ! -e ${J_INSTALL_DIR}/jre/bin/${name} ]]; then
      if [[ ! -e ${J_INSTALL_DIR}/bin/${name} ]]; then
        echo "** Missing executable ${J_INSTALL_DIR}/bin/${name} even though man page ${f} exists." 1>&2
        echo "** This is probably a bug in Adoptium and should be reported upstream." 1>&2
      else
        update-alternatives --install /usr/bin/${name} ${name} ${J_INSTALL_DIR}/bin/${name} ${PRIORITY} --slave /usr/share/man/man1/${name}.1.gz ${name}.1.gz ${J_INSTALL_DIR}/man/man1/${name}.1.gz
        echo "jdk $name $J_INSTALL_DIR/bin/$name" >> ${JINFO_MANIFEST_FILE}
        [[ "a$name" == "ajava" ]] && HAS_JAVA_BIN=true
      fi
    fi
  done
fi

if [[ "$HAS_JAVA_BIN" != "true" ]]; then
  echo "Package failed to install a 'java' alternative. This is probably a bug in the installer, or upstream."  1>&2
  ls -laR ${J_INSTALL_DIR} 1>&2
  exit 3
fi

# Place security config files in /etc so they are not overwritten on upgrade.
# @TODO: pardini: I am not sure this is a good idea; new JDK versions can bring updated files?

mkdir -p /etc/${J_ID}/security
for configfile in blacklist blacklisted.certs java.policy java.security trusted.libraries
do
	if [ ! -e /etc/${J_ID}/security/${configfile} ] && [ -e $J_INSTALL_DIR/jre/lib/security/${configfile} ]; then
		mv ${J_INSTALL_DIR}/jre/lib/security/${configfile} /etc/${J_ID}/security/
	else
		rm -f ${J_INSTALL_DIR}/jre/lib/security/${configfile}
	fi
done

for configfile in blacklist blacklisted.certs java.policy java.security trusted.libraries
do
	if [ ! -e ${J_INSTALL_DIR}/jre/lib/security/${configfile} ] && [ -e /etc/${J_ID}/security/${configfile} ]; then
		ln -s /etc/${J_ID}/security/${configfile} ${J_INSTALL_DIR}/jre/lib/security/
	fi
done

cat << 'EOD'
    _       _             _   _
   / \   __| | ___  _ __ | |_(_)_   _ _ __ ___
  / _ \ / _` |/ _ \| '_ \| __| | | | | '_ ` _ \
 / ___ \ (_| | (_) | |_) | |_| | |_| | | | | | |
/_/   \_\__,_|\___/| .__/ \__|_|\__,_|_| |_| |_|
                   |_|
EOD

echo "{{fullHumanTitle}} installed"
echo "To set {{fullHumanTitle}} as default, install the \"{{setDefaultPackageName}}\" package."

#DEBHELPER#

